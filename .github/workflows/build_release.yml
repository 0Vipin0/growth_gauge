name: Build and Release Growth Gauge

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0.0

permissions:
  contents: write # Needed to create releases and upload assets

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter SDK
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: stable
          version: 3.29.1
          cache: true
          cache-sdk: true

      - name: Get dependencies
        run: flutter pub get

      - name: Flutter Analyze
        run: flutter analyze

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev libglib2.0-dev libsecret-1-dev libjsoncpp-dev

      - name: Setup JDK for Android
        uses: actions/setup-java@v4
        if: matrix.os == 'ubuntu-latest'
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Download keystore for Android
        id: android_keystore
        uses: timheuer/base64-to-file@v1.2
        if: matrix.os == 'ubuntu-latest'
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.KEYSTORE_BASE64 }} # Store your base64 encoded keystore in secrets

      - name: Create key.properties for Android build
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
        shell: bash

      - name: Build Linux Release
        if: matrix.os == 'ubuntu-latest'
        run: flutter build linux --release

      - name: Build Windows Release
        if: matrix.os == 'windows-latest'
        run: flutter build windows --release

      - name: Build Android Release
        if: matrix.os == 'ubuntu-latest'
        run: flutter build apk --release

      - name: Copy Android Release Artifacts
        if: matrix.os == 'ubuntu-latest'
        run: |
          mkdir -p artifacts # Create artifacts directory
          cp -rp build/app/outputs/apk/release/*.apk artifacts/android_release.apk
        shell: bash

      - name: Zip Linux Release Artifacts
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd build/linux/x64/release/bundle
          zip -r ../../../../../artifacts/linux_release.zip . 
        shell: bash

      - name: Install msix tool
        if: matrix.os == 'windows-latest'
        run: dart pub global activate msix
        shell: pwsh

      - name: Create MSIX package
        if: matrix.os == 'windows-latest'
        # IMPORTANT: Ensure pubspec.yaml has msix_config section
        # Add --sign flags if using a certificate (see comments above)
        run: dart run msix:create
        shell: pwsh

      - name: Prepare Windows Release Artifacts
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p artifacts # Create artifacts directory
          Copy-Item -Path build\windows\x64\runner\Release\*.msix -Destination artifacts\windows_release.msix
          Remove-Item -Path build\windows\x64\runner\Release\*.msix -Force
          Compress-Archive -Path build\windlsows\x64\runner\Release\* -DestinationPath artifacts\windows_release.zip
          # Copy the MSIX file (adjust name if needed, wildcard handles potential variations)
        shell: pwsh

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-release-artifacts # Unique name per OS
          path: artifacts/ # Upload the entire artifacts directory

  release:
    needs: build # Run after build jobs complete successfully
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts into 'artifacts' directory

      - name: List downloaded artifacts
        run: find artifacts -type f

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux Release Asset (ZIP)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/ubuntu-latest-release-artifacts/linux_release.zip
          asset_name: growth_gauge_linux-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Upload Windows Release Asset (ZIP)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows-latest-release-artifacts/windows_release.zip
          asset_name: growth_gauge_windows-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Upload Windows Release Asset (MSIX)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/windows-latest-release-artifacts/windows_release.msix
          asset_name: growth_gauge_windows-${{ github.ref_name }}.msix
          asset_content_type: application/msix # Correct content type for MSIX

      - name: Upload Android Release Asset (APK)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/ubuntu-latest-release-artifacts/android_release.apk
          asset_name: growth_gauge_android-${{ github.ref_name }}.apk
          # Use 'application/vnd.android.package-archive' for APK
          asset_content_type: application/vnd.android.package-archive
